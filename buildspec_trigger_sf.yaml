version: 0.2
phases:
  build:
    commands:
      - next_pr=$(aws sdb select --select-expression "SELECT * FROM `$DOMAIN_NAME`" --max-items 1 | jq '.Items[0]')
      - pr_id=$(echo $next_pr | jq '.Name')
      - head_ref=$(echo $next_pr | jq '.Attributes | .[] | select(.Name=="HeadRef") | .Value')
      - git fetch origin pull/$pr_id/head:$head_ref
      - git checkout $head_ref
      - python <<HEREDOC
      import json
      import logging

      import boto3
      import os
      import re
      from typing import List, Union, Dict, Any
      import subprocess


      log = logging.getLogger(__name__)
      log.setLevel(logging.DEBUG)

      def get_run_order(modified_dirs: list) -> Dict[str, List[str]]:
        """
        Returns a map of the modified directory and its's associated Terragrunt depedency directories ordered by least immediate to most immediate depedency

        :param modified_dirs: List of directories that contain Terragrunt *.hcl files
        """
        log = logging.getLogger(__name__)
        log.setLevel(logging.DEBUG)

        targets = []
        all_deps = []	  
        for mod_dir in modified_dirs:
          if mod_dir not in all_deps:
            # gets terragrunt ordered dependencies of directory
            log.debug(f'Modified Path: {mod_dir}')
            cmd = ['terragrunt', 'graph-dependencies', '--terragrunt-non-interactive', '--terragrunt-working-dir', mod_dir]
            proc = subprocess.run(cmd, capture_output=True, text=True).stdout
            #parses out directories within cmd output
            ordered_deps = re.findall('(?<=").+(?="\s;)', proc)
            log.debug(f'order dependencies: {ordered_deps}')
            run_order = []
            for dep in ordered_deps:
              run_order.append(dep)
              if dep in modified_dirs:
                # skip runninng graph-deps on modified directory since directory and dependencies will be add within this iteration
                modified_dirs.remove(dep)

            # reverse dependency list to change order to least immediate to most immediate dependency
            run_order.reverse()

            log.debug(f'run order: {run_order}')

            targets.append(run_order)
          else:
            # skip runninng graph-deps given directory and associated deps are already within a higher-level modified dir
            continue

        log.debug(f'Modified directory and ordered dependencies: {targets}')

        return targets

      cmd = "terragrunt run-all plan --terragrunt-non-interactive --terragrunt-log-level error -detailed-exitcode".split(" ")
      out = subprocess.run(cmd, text=True, capture_output=True)
      diff_paths = re.findall("(?<=exit\sstatus\s2\sprefix=\[).+(?=\])", out.stderr)

      diff_run_order = get_run_order(diff_paths)

      sf_input = f'"input": {json.dumps(diff_run_order)}'
      sf = boto3.client('stepfunctions')
      response = sf.start_execution(
          stateMachineArn=os.environ['STEP_MACHINE_ARN'],
          input=sf_input
      )

      # TODO: Add rm from sdb queue
      HEREDOC