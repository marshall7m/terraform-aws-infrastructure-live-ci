version: 0.2
env:
  shell: bash
phases:
  pre_build:
    on-failure: ABORT
    commands:
      - "echo Terraform version: $(terraform --version)"
      - "echo Terragrunt version: $(terragrunt --version)"
      - "echo TERRAGRUNT_WORKING_DIR: ${TERRAGRUNT_WORKING_DIR}"
  build:
    on-failure: ABORT
    commands:
      - |
        source "CODEBUILD_SRC_DIR_${SECONDARY_SOURCE_IDENTIFIER}/utils.sh"

        if [ -z  $CODEBUILD_WEBHOOK_TRIGGER ]; then
          log "Starting a new Step Function execution with new Pull Request" "INFO"
          if [ -z $pull_request_id ]; then
            log "Pulling next Pull Request from queue" "INFO"
            aws configure set preview.sdb true
            PULL_REQUEST_RECORD=$(aws sdb select --select-expression 'SELECT * FROM `'"$DOMAIN_NAME"'`' --max-items 1 | jq '.Items[0]')
            pull_request_id=$(echo $PULL_REQUEST_RECORD | jq '.Name' | tr -d '"')
            head_ref=$(echo $PULL_REQUEST_RECORD | jq '.HeadRef' | tr -d '"')

            log "Removing Pull Request from queue" "INFO"
            aws sdb delete-attributes --item-name $pull_request_id --domain-name $DOMAIN_NAME
          else
              log "Skip pulling Pull Request from queue" "INFO"
              log "Using Overridden Pull Request ID" "INFO"
          fi
          log "Pull Request ID: $pull_request_id" "DEBUG"
          git fetch origin pull/$pull_request_id/head:pr-${pull_request_id}
          git checkout pr-${pull_request_id}
          create_pr_codebuild_webhook $BUILD_NAME $BASE_REF $HEAD_REF
        else
          pull_request_id=$( echo "${CODEBUILD_WEBHOOK_TRIGGER}" | cut -d '/' -f 2 )
          log "Pull Request ID: $pull_request_id" "DEBUG"

          log "New commits were added to pull request" "INFO"
        fi

        log "Base Ref: $BASE_REF" "DEBUG"
        base_source_version=refs/heads/$BASE_REF^{$( git rev-parse --verify $BASE_REF )}
        log "Base Ref Source Version: $base_source_version" "DEBUG"

        head_source_version=refs/pull/$pull_request_id/head^{$( git rev-parse --verify HEAD )}
        log "Head Ref Source Version: $head_source_version" "DEBUG"

        aws s3api get-object \
          --bucket $ARTIFACT_BUCKET_NAME \
          --key $APPROVAL_MAPPING_S3_KEY \
          approval_mapping.json > /dev/null

        approval_mapping=$(jq . approval_mapping.json)
        log "Approval Mapping:" "DEBUG"
        log "$approval_mapping" "DEBUG"

        create_execution_artifact $base_source_version $head_source_version "$approval_mapping"

        if [ -z "${DRY_RUN}" ]; then
          current_execution_arn=$(aws stepfunctions list-executions \
            --state-machine-arn $STATE_MACHINE_ARN \
            --status-filter "RUNNING" | jq '.executions | .[] | .executionArn'
          )

          log "Stopping Step Function execution: $current_execution_arn" "INFO"
          aws stepfunctions stop-execution \
            --execution-arn $current_execution_arn \
            --cause "New commits were added to pull request"
          
          execution_name="${head_source_version}"
          log "Execution Name: ${execution_name}" "INFO"

          echo "$execution" > $execution_name.json
          log "Uploading execution artifact to S3" "INFO"
          aws s3api put-object \
              --acl private \
              --body $execution_name.json \
              --bucket $ARTIFACT_BUCKET_NAME \
              --key $execution_name.json

          log "Starting Execution" "INFO"
          aws stepfunctions start-execution \
              --state-machine-arn $STATE_MACHINE_ARN \
              --name "${execution_name}" \
              --input '"input": "{}"'
          fi
     