version: 0.2
env:
  shell: bash
phases:
  pre_build:
    on-failure: ABORT
    commands:
      - "echo Terraform version: $(terraform --version)"
      - "echo Terragrunt version: $(terragrunt --version)"
      - "echo TERRAGRUNT_WORKING_DIR: ${TERRAGRUNT_WORKING_DIR}"
  build:
    on-failure: ABORT
    commands:
      - |
        source "CODEBUILD_SRC_DIR_${SECONDARY_SOURCE_IDENTIFIER}/utils.sh"

        aws s3api get-object \
          --bucket $ARTIFACT_BUCKET_NAME \
          --key $ARTIFACT_BUCKET_PR_QUEUE_KEY \
          pr_queue.json > /dev/null

        pr_queue=$(jq . pr_queue.json)
        log "Pull Request Queue:" "DEBUG"
        log "$pr_queue" "DEBUG"

        in_progress=$( echo $pr_queue | jq '.InProgress' )
        if [ $in_progress == "" ] ; then
          create_new_artifact=true
          log "Starting a new Step Function execution with new Pull Request" "INFO"
          
          log "Pulling next Pull Request from queue" "DEBUG"
          pull_request_id=$( echo $pr_queue | jq '.Queue[0]' )
          log "Pull Request ID: $pull_request_id" "DEBUG"

          head_ref=$( echo $pr_queue | jq '.BaseRef' )

          log "Removing Pull Request from queue" "INFO"
          updated_pr_queue=$( echo $pr_queue | jq 'del(.Queue[0])' )
          
          echo "$updated_pr_queue" > $pr_queue.json
          log "Uploading Updated PR Queue" "DEBUG"
          aws s3api put-object \
            --acl private \
            --body ./pr_queue.json \
            --bucket $ARTIFACT_BUCKET_NAME \
            --key $ARTIFACT_BUCKET_PR_QUEUE_KEY.json

          log "Locking Deployments only from PR"
          create_pr_codebuild_webhook $BUILD_NAME $BASE_REF $head_ref

          git fetch origin pull/$pull_request_id/head:pr-${pull_request_id}
          git checkout pr-${pull_request_id}  
        
        elif [ -n  $CODEBUILD_WEBHOOK_TRIGGER ]; then
          create_new_artifact=true

          log "New commits were added" "INFO"

          pull_request_id=$( echo "${CODEBUILD_WEBHOOK_TRIGGER}" | cut -d '/' -f 2 )
          log "Pull Request ID: $pull_request_id" "DEBUG"

          if [ -z "${DRY_RUN}" ]; then
            current_execution_arn=$(aws stepfunctions list-executions \
              --state-machine-arn $STATE_MACHINE_ARN \
              --status-filter "RUNNING" | jq '.executions | .[] | .executionArn'
            )

            log "Stopping Step Function execution: $current_execution_arn" "INFO"
            aws stepfunctions stop-execution \
              --execution-arn $current_execution_arn \
              --cause "New commits were added to pull request"
          fi
        fi

        head_source_version=refs/pull/$pull_request_id/head^{$( git rev-parse --verify HEAD )}
        log "Head Ref Source Version: $head_source_version" "DEBUG"

        if [ -n $create_new_artifact ]; then
        
          log "Base Ref: $BASE_REF" "DEBUG"
          base_source_version=refs/heads/$BASE_REF^{$( git rev-parse --verify $BASE_REF )}
          log "Base Ref Source Version: $base_source_version" "DEBUG"

          head_source_version=refs/pull/$pull_request_id/head^{$( git rev-parse --verify HEAD )}
          log "Head Ref Source Version: $head_source_version" "DEBUG"

          aws s3api get-object \
            --bucket $ARTIFACT_BUCKET_NAME \
            --key $APPROVAL_MAPPING_S3_KEY \
            approval_mapping.json > /dev/null

          approval_mapping=$(jq . approval_mapping.json)
          log "Approval Mapping:" "DEBUG"
          log "$approval_mapping" "DEBUG"

          create_commit_stack $base_source_version $head_source_version "$approval_mapping"
        fi
        
        get_deploy_stack $commit_stack
        
        
        if [ -z "${DRY_RUN}" ]; then
          execution_name="${head_source_version}"
          log "Execution Name: ${execution_name}" "INFO"

          echo "$execution" > $execution_name.json
          log "Uploading execution artifact to S3" "INFO"
          aws s3api put-object \
              --acl private \
              --body $execution_name.json \
              --bucket $ARTIFACT_BUCKET_NAME \
              --key $execution_name.json

          log "Starting Execution" "INFO"
          aws stepfunctions start-execution \
              --state-machine-arn $STATE_MACHINE_ARN \
              --name "${execution_name}" \
              --input $sf_input
          fi
     