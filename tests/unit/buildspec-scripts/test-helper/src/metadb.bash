setup_metadb() {

    psql -c """
    CREATE TABLE IF NOT EXISTS executions (
        execution_id VARCHAR PRIMARY KEY,
        is_rollback BOOL,
        pr_id INT,
        commit_id VARCHAR,
        base_ref VARCHAR,
        head_ref VARCHAR,
        base_source_version VARCHAR,
        head_source_version VARCHAR,
        cfg_path VARCHAR,
        cfg_deps TEXT[],
        status VARCHAR,
        plan_command VARCHAR,
        deploy_command VARCHAR,
        new_providers TEXT[],
        new_resources TEXT[],
        account_name VARCHAR,
        account_path VARCHAR,
        account_deps TEXT[],
        voters TEXT[],
        approval_count INT CHECK (approval_count >= 0),
        min_approval_count INT CHECK (min_approval_count >= 0),
        rejection_count INT CHECK (rejection_count >= 0),
        min_rejection_count INT CHECK (min_rejection_count >= 0)
    );

    CREATE TABLE IF NOT EXISTS pr_queue (
        id INT GENERATED BY DEFAULT AS IDENTITY,
        pr_id INT,
        status VARCHAR,
        base_ref VARCHAR,
        head_ref VARCHAR
    );

    CREATE TABLE IF NOT EXISTS commit_queue (
        id INT GENERATED BY DEFAULT AS IDENTITY,
        commit_id VARCHAR,
        is_rollback BOOL,
        pr_id INT,
        status VARCHAR
    );

    CREATE TABLE IF NOT EXISTS account_dim (
        account_name VARCHAR PRIMARY KEY,
        account_path VARCHAR,
        account_deps TEXT[],
        min_approval_count INT,
        min_rejection_count INT,
        voters TEXT[]
    );
"""
}

clear_metadb_tables() {
	echo >&2 "FUNCNAME=$FUNCNAME"

	sql="""
	CREATE OR REPLACE FUNCTION truncate_if_exists(_schema VARCHAR, _cataecho >&2 VARCHAR, _table VARCHAR) 
		RETURNS text 
		LANGUAGE plpgsql AS
		
	\$\$
	DECLARE 
		_full_table text := concat_ws('.', quote_ident(_schema), quote_ident(_table));
	BEGIN
		IF EXISTS (
			SELECT 
				1 
			FROM 
				INFORMATION_SCHEMA.TABLES 
			WHERE
				TABLE_SCHEMA = _schema AND
				TABLE_CATAecho >&2 = _cataecho >&2 AND
				TABLE_NAME = _table
		)
		THEN
			EXECUTE 'TRUNCATE ' || _full_table ;
			RETURN 'Table truncated: ' || _full_table;
		ELSE
			RETURN 'Table does not exists: ' || _full_table;
		END IF;
	END;
	\$\$;

	SELECT truncate_if_exists('public', '$TESTING_POSTGRES_DB', 'executions');
	SELECT truncate_if_exists('public', '$TESTING_POSTGRES_DB', 'commit_queue');
	SELECT truncate_if_exists('public', '$TESTING_POSTGRES_DB', 'account_dim');
	SELECT truncate_if_exists('public', '$TESTING_POSTGRES_DB', 'pr_queue');

	"""
	sql -c "$sql"
}