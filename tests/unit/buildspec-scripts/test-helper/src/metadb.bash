init_tables() {

    psql -v ON_ERROR_STOP=1 \
    --username "$POSTGRES_USER" \
    --dbname "$POSTGRES_DB"  \
    --variable=POSTGRES_USER="$POSTGRES_USER" \
    --variable=TESTING_POSTGRES_USER="$PGUSER" \
    --variable=TESTING_POSTGRES_DB="$PGDATABASE" <<-EOSQL
    CREATE USER :TESTING_POSTGRES_USER;
    GRANT :POSTGRES_USER to :TESTING_POSTGRES_USER;
    CREATE DATABASE :TESTING_POSTGRES_DB;
    GRANT ALL PRIVILEGES ON DATABASE :TESTING_POSTGRES_DB TO :TESTING_POSTGRES_USER;

    \c :TESTING_POSTGRES_DB
    
    set plpgsql.check_asserts to on;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO :TESTING_POSTGRES_USER;

    SET ROLE :TESTING_POSTGRES_USER;
    
    CREATE TABLE IF NOT EXISTS executions (
        execution_id VARCHAR PRIMARY KEY,
        is_rollback BOOL,
        pr_id INT,
        commit_id VARCHAR,
        base_ref VARCHAR,
        head_ref VARCHAR,
        base_source_version VARCHAR,
        head_source_version VARCHAR,
        cfg_path VARCHAR,
        cfg_deps TEXT[],
        status VARCHAR,
        plan_command VARCHAR,
        deploy_command VARCHAR,
        new_providers TEXT[],
        new_resources TEXT[],
        account_name VARCHAR,
        account_path VARCHAR,
        account_deps TEXT[],
        voters TEXT[],
        approval_count INT CHECK (approval_count >= 0),
        min_approval_count INT CHECK (min_approval_count >= 0),
        rejection_count INT CHECK (rejection_count >= 0),
        min_rejection_count INT CHECK (min_rejection_count >= 0)
    );

    CREATE TABLE IF NOT EXISTS pr_queue (
        id INT GENERATED BY DEFAULT AS IDENTITY,
        pr_id INT,
        status VARCHAR,
        base_ref VARCHAR,
        head_ref VARCHAR
    );

    CREATE TABLE IF NOT EXISTS commit_queue (
        id INT GENERATED BY DEFAULT AS IDENTITY,
        commit_id VARCHAR,
        is_rollback BOOL,
        pr_id INT,
        status VARCHAR
    );

    CREATE TABLE IF NOT EXISTS account_dim (
        account_name VARCHAR PRIMARY KEY,
        account_path VARCHAR,
        account_deps TEXT[],
        min_approval_count INT,
        min_rejection_count INT,
        voters TEXT[]
    );
EOSQL
}

if [ "$DB_TYPE" == "dev" ]; then

    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
    export VOLUME_DATA_DIR="$DIR/docker_pgsql_volume"
    docker-compose --file "docker-compose.yml" up --detach || exit 1

elif [ "$DB_TYPE" == "CI" ]; then
    #TODO: GET params from secure source (e.g. aws ssm param store)
    export POSTGRES_USER:="postgres"
    export POSTGRES_PASSWORD:="testing_password"
    export PGUSER:="testing_user"
    export PGDATABASE:="testing_db"
    export PGHOST:="/run/postgresql"
else
    echo >&2 "DB_TYPE is not set (local|aws)"
fi

teardown_db() {

	echo >&2 "FUNCNAME=$FUNCNAME"

	if [ "$DB_TYPE" == "dev" ]; then
		if [ -z "$KEEP_db_OPEN" ]; then
			docker-compose down -v 
			echo >&2 "Removing local postgres data to allow postgres image to run *.sh | *.sql scripts within host"
			rm -rf "$VOLUME_DATA_DIR"
		else
			echo >&2 "Keeping local db container running"
		fi
	fi
	
}

clear_db_tables() {
	echo >&2 "FUNCNAME=$FUNCNAME"

	sql="""
	CREATE OR REPLACE FUNCTION truncate_if_exists(_schema VARCHAR, _cataecho >&2 VARCHAR, _table VARCHAR) 
		RETURNS text 
		LANGUAGE plpgsql AS
		
	\$\$
	DECLARE 
		_full_table text := concat_ws('.', quote_ident(_schema), quote_ident(_table));
	BEGIN
		IF EXISTS (
			SELECT 
				1 
			FROM 
				INFORMATION_SCHEMA.TABLES 
			WHERE
				TABLE_SCHEMA = _schema AND
				TABLE_CATAecho >&2 = _cataecho >&2 AND
				TABLE_NAME = _table
		)
		THEN
			EXECUTE 'TRUNCATE ' || _full_table ;
			RETURN 'Table truncated: ' || _full_table;
		ELSE
			RETURN 'Table does not exists: ' || _full_table;
		END IF;
	END;
	\$\$;

	SELECT truncate_if_exists('public', '$TESTING_POSTGRES_DB', 'executions');
	SELECT truncate_if_exists('public', '$TESTING_POSTGRES_DB', 'commit_queue');
	SELECT truncate_if_exists('public', '$TESTING_POSTGRES_DB', 'account_dim');
	SELECT truncate_if_exists('public', '$TESTING_POSTGRES_DB', 'pr_queue');

	"""
	sql -c "$sql"
}