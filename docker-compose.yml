version: '3.8'
services:
  postgres:
    image: postgres:10.14-alpine
    restart: always
    container_name: postgres
    volumes:
    - $PWD/docker-pgsql-entrypoint:/docker-entrypoint-initdb.d
    - $PWD/docker-pgsql-volume:/var/lib/postgresql/data
    ports:
    - 5432:5432
    environment:
    - POSTGRES_PASSWORD=postgres
    - POSTGRES_DB=postgres
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: [CMD-SHELL, pg_isready -U postgres]
      interval: 15s
      timeout: 5000s
      retries: 50
    profiles: [unit, integration]

  sf-local:
    image: amazon/aws-stepfunctions-local:1.10.2
    container_name: step-function-local
    volumes:
    - $PWD/tests/integration/step-function/mock_sf_cfg.json:/src/mock_sf_cfg.json
    ports:
    - 8083:8083
    environment:
    - SFN_MOCK_CONFIG=/src/mock_sf_cfg.json
    profiles: [integration]

  local-data-api:
    image: koxudaxi/local-data-api:0.6.12
    restart: always
    environment:
    - ENGINE=PostgresSQL
    - POSTGRES_HOST=postgres
    - POSTGRES_PORT=5432
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=postgres
    - RESOURCE_ARN=${METADB_CLUSTER_ARN}
    - SECRET_ARN=${METADB_SECRET_ARN}
    ports:
    - 8080:80
    profiles: [unit, integration]

  unit:
    network_mode: host
    stdin_open: true
    tty: true
    image: terraform-aws-infrastructure-live/unit
    build: ./tests/unit
    volumes:
    - $PWD:/src
    environment:
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_REGION=us-west-2
    - AWS_DEFAULT_REGION
    - AWS_SESSION_TOKEN
    - AWS_SESSION_EXPIRATION
    - UNTIL_AWS_EXP=30m
    - TF_VAR_testing_unit_github_token
    - PGUSER=postgres
    - PGPASSWORD=postgres
    - PGDATABASE=postgres
    - PGHOST=postgres
    - PGPORT=5432
    - METADB_CLUSTER_ARN=${METADB_CLUSTER_ARN}
    - METADB_NAME=${METADB_NAME}
    - METADB_SECRET_ARN=${METADB_SECRET_ARN}
    - LOCAL_METAB_PORT=${LOCAL_METAB_PORT}
    entrypoint: [/bin/bash, entrypoint.sh]
    profiles: [unit]
    depends_on:
    - local-data-api
    - postgres

  integration:
    network_mode: host
    stdin_open: true
    tty: true
    image: terraform-aws-infrastructure-live/integration
    build: ./tests/integration
    volumes:
    - $PWD:/src
    - /var/run/docker.sock:/var/run/docker.sock
    environment:
    - AWS_ACCESS_KEY_ID=dummy-key
    - AWS_SECRET_ACCESS_KEY=dummy-secret
    - AWS_REGION=us-west-2
    - AWS_DEFAULT_REGION=us-west-2
    - PGUSER=postgres
    - PGPASSWORD=postgres
    - PGDATABASE=postgres
    - PGHOST=postgres
    - PGPORT=5432
    entrypoint: [/bin/bash, entrypoint.sh]
    profiles: [integration]
    depends_on:
    - postgres
    - sf-local
    - local-data-api

  e2e:
    stdin_open: true
    tty: true
    image: ghcr.io/marshall7m/terrace:v0.1.11
    volumes:
    - $PWD:/src
    - /usr/bin/docker:/usr/bin/docker
    - /var/run/docker.sock:/var/run/docker.sock
    environment:
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_REGION
    - AWS_DEFAULT_REGION
    - AWS_SESSION_TOKEN
    - AWS_SESSION_EXPIRATION
    - TF_VAR_testing_integration_github_token
    - TF_VAR_registry_password
    - TF_VAR_github_token_ssm_value
    - TF_VAR_approval_request_sender_email
    - UNTIL_AWS_EXP=1h
    - ADDITIONAL_PATH
    entrypoint: [/bin/bash, entrypoint.sh]
