name: "Tests"
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - master
    tags:
      - ci
      - tests  
    paths-ignore:
    - .gitignore
    - LICENSE.md
    - README.md
    - buildspecs/img/**
    - .github/workflows/build.yml

  push:
    branches:
    - master
    tags:
      - ci
      - tests  
    paths-ignore:
      - .gitignore
      - LICENSE.md
      - README.md
      - buildspecs/img/**
      - .github/workflows/build.yml

env:
  PYTEST_ADDOPTS: --color=yes
  PYTHON_VERSION: pypy-3.9
  AWS_REGION: us-west-2
jobs:
  precommit:
    runs-on: ubuntu-latest
    container: ghcr.io/marshall7m/terrace:v0.1.5
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: Hooks
        shell: bash
        run: |
          source $VIRTUAL_ENV/bin/activate
          python3 -m pip install -e ".[precommit]"
          pre-commit install
          pre-commit run --all-files

  unit:
    needs: precommit
    runs-on: ubuntu-latest
    container: ghcr.io/marshall7m/terrace:v0.1.5
    services:
      postgres:
        image: postgres:10.14-alpine
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      TF_VAR_testing_unit_github_token: ${{ secrets.TF_VAR_TESTING_UNIT_GITHUB_TOKEN }}
      TF_VAR_approval_request_sender_email: ${{ secrets.TF_VAR_APPROVAL_REQUEST_SENDER_EMAIL }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: mask sensitive
        run: |
          echo "::add-mask::$TF_VAR_testing_unit_github_token"
          echo "::add-mask::$TF_VAR_approval_request_sender_email"

      - name: Configure AWS Credentials for remote workflow
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ !env.ACT }}
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS Credentials for local workflow
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ env.ACT }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Tests
        id: pytest_unit
        shell: bash
        if: ${{ !env.ACT }}
        env:
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: postgres
          PGHOST: postgres
          PGPORT: 5432
        run: |
          source $VIRTUAL_ENV/bin/activate
          python3 -m pip install -e ".[unit]"
          pytest -vv tests/unit

      - name: Install Docker
        id: unit_install_docker
        shell: bash
        if: ${{ env.ACT }} 
        run: |
          bash ./runner_install_docker.sh

      # using docker compose workaround until nektos/act handles services properly. See issue: https://github.com/nektos/act/issues/173
      - name: Tests
        id: act_pytest_unit
        shell: bash
        if: ${{ env.ACT }} 
        run: |
          docker compose run unit pytest -vv tests/unit

  integration:
    needs: [precommit, unit]
    runs-on: ubuntu-latest
    container: ghcr.io/marshall7m/terrace:v0.1.5
    permissions:
      id-token: write
      contents: read
    env:
      TF_VAR_testing_integration_github_token: ${{ secrets.TF_VAR_TESTING_INTEGRATION_GITHUB_TOKEN }}
      TF_VAR_merge_lock_github_token_ssm_value: ${{ secrets.TF_VAR_MERGE_LOCK_GITHUB_TOKEN_SSM_VALUE }}
      TF_VAR_github_webhook_validator_github_token_ssm_value: ${{ secrets.TF_VAR_GITHUB_WEBHOOK_VALIDATOR_GITHUB_TOKEN_SSM_VALUE }}
      TF_VAR_testing_secondary_aws_account_id: ${{ secrets.TF_VAR_TESTING_SECONDARY_AWS_ACCOUNT_ID }}
      TF_VAR_approval_request_sender_email: ${{ secrets.TF_VAR_APPROVAL_REQUEST_SENDER_EMAIL }}
    steps:
      - uses: actions/checkout@v3
      - name: mask sensitive
        run: |
          echo "::add-mask::$TF_VAR_testing_integration_github_token"
          echo "::add-mask::$TF_VAR_merge_lock_github_token_ssm_value"
          echo "::add-mask::$TF_VAR_github_webhook_validator_github_token_ssm_value"
          echo "::add-mask::$TF_VAR_testing_secondary_aws_account_id"
          echo "::add-mask::$TF_VAR_approval_request_sender_email"

      - name: Configure AWS Credentials for remote workflow
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ !env.ACT }}
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 21600 # 6hrs

      - name: Configure AWS Credentials for local workflow
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ env.ACT }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Tests
        id: pytest_integration
        shell: bash
        run: |
          source $VIRTUAL_ENV/bin/activate
          python3 -m pip install -e ".[integration]"
          pytest -vv -o log_cli=true tests/integration